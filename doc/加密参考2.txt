CS，C客户端，S服务器端 
    在客户端软件发布前，客户端保存一个公钥，服务器保存一个私钥 
    C1：客户端随机生成一个对称密钥K，使用公钥加密内容（K+账户+密码）。发送给服务器 
    S2：服务器收到后使用私钥解密，并验证用户和密码是否正确，正确的话保存此K在用户的信息中（如果原先已经有了K就替换掉旧的），返回数据：包括客户端登录成功的信息，返回一个Token（令牌，以后见牌如见人）和一个uid（用户的id）。 
    C3：使用本地保存的K解密得到Token和自己的uid。 
    安全传输准备工作做完了。 
    C4：每次传输数据对于加密的内容一律使用K进行加密，并附以明文参数uid，然后把此内容发送给服务器。 
    S5：根据uid找到保存的K，然后进行解密（K仅仅用来解密，对于解密的内容无法验证），查看Token是否匹配，如果匹配的话那么此次请求就是有效的，否则无效。 


用户表：
	UserName
	PassWord
	uid
	客服端随机K
	Token




api接口签名设计：

     对于敏感的api接口，需使用https协议
           https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。
           https协议需要ca证书，一般需要交费。

     签名的设计
           原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正取，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：
         时间戳：timestamp
         Token令牌：token
         然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。
例如：原请求https://www.andy.cn/api/user/update/info.shtml?city=北京 （post和get都一样，对所有参数排序加密）
 加上时间戳和token
       https://www.andy.cn/api/user/update/info.shtml?city=北京&timestamp=12445323134&token=wefkfjdskfjewfjkjfdfnc
      然后更具url参数生成sign
      最终的请求如
         https://www.andy.cn/api/user/update/info.shtml?city=北京&timestamp=12445323134&token=wefkfjdskfjewfjkjfdfnc&sign=FDK2434JKJFD334FDF2

 	    1. api请求客户端想服务器端一次发送用用户认证信息（用户名和密码），服务器端请求到改请求后，验证用户信息是否正确。
        	如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token----Uid的用户信息关系，以便其他api对token的校验。
        	如果错误：则返回错误码。
          
            2.服务器设计一个url请求拦截规则
               （1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。
               （2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该                         url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。
               （3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。
               （4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名                       也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样如果无法确保公钥丢失，所以签名只是很大程                       度上保证安全）。
                （5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。

            3.Token和Uid关系维护
               对于用户登录我们需要创建token--uid的关系，用户退出时需要需删除token--uid的关系。
